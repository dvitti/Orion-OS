;----------------------------------------
;-  Setup IDT   -
;----------------------------------------

%macro IRQ 2
  global irq%1
  irq%1:
    cli
    push byte 0
    push byte %2
    jmp irq_common_stub
%endmacro

[bits 32]
idt_start:
; This macro creates a stub for an IRQ - the first parameter is
; the IRQ number, the second is the ISR number it is remapped to.
        IRQ   0,    32
        IRQ   1,    33
        IRQ   2,    34
        IRQ   3,    35
        IRQ   4,    36
        IRQ   5,    37
        IRQ   6,    38
        IRQ   7,    39
        IRQ   8,    40
        IRQ   9,    41
        IRQ   10,    42
        IRQ   11,    43
        IRQ   12,    44
        IRQ   13,    45
        IRQ   14,    46
        IRQ   15,    47

idt_end:
 
 
idt_point:
        dw idt_end - idt_start - 1
        ;dw 0x0000
        dw idt_start
 
 
isr0:
    ; 1. Save CPU state
	;pusha ; Pushes edi,esi,ebp,esp,ebx,edx,ecx,eax

    pusha                    ; Pushes edi,esi,ebp,esp,ebx,edx,ecx,eax

    mov ax, ds               ; Lower 16-bits of eax = ds.
    push eax                 ; save the data segment descriptor

    mov ax, 0x10  ; load the kernel data segment descriptor
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax

    ; 2. Call C handler
    mov ebx, MSG_PROT_MODE
    call print_string_pm

    pop ebx        ; reload the original data segment descriptor
    mov ds, bx
    mov es, bx
    mov fs, bx
    mov gs, bx

    popa                     ; Pops edi,esi,ebp...
    add esp, 8     ; Cleans up the pushed error code and pushed ISR number
    sti
    iret           ; pops 5 things at once: CS, EIP, EFLAGS, SS, and ESP

; This is our common IRQ stub. It saves the processor state, sets
; up for kernel mode segments, calls the C-level fault handler,
; and finally restores the stack frame.
irq_common_stub:
   pusha                    ; Pushes edi,esi,ebp,esp,ebx,edx,ecx,eax

   mov ax, ds               ; Lower 16-bits of eax = ds.
   push eax                 ; save the data segment descriptor

   mov ax, 0x10  ; load the kernel data segment descriptor
   mov ds, ax
   mov es, ax
   mov fs, ax
   mov gs, ax

   ; call irq_handler

   pop ebx        ; reload the original data segment descriptor
   mov ds, bx
   mov es, bx
   mov fs, bx
   mov gs, bx

   popa                     ; Pops edi,esi,ebp...
   add esp, 8     ; Cleans up the pushed error code and pushed ISR number
   sti
   iret           ; pops 5 things at once: CS, EIP, EFLAGS, SS, and ESP
